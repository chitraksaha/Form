/* Universal Box Sizing */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Body and Overall Container Styling */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.form-container {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 40px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 500px;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

/* Form Title Styling */
.form-title {
    text-align: center;
    color: #333;
    margin-bottom: 30px;
    font-size: 28px;
    font-weight: 600;
    background: linear-gradient(135deg, #667eea, #764ba2);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

/* Form Group Layout */
.form-group {
    margin-bottom: 20px;
    position: relative;
}

/* Label Styling */
label {
    display: block;
    margin-bottom: 8px;
    color: #555;
    font-weight: 500;
    font-size: 14px;
    transition: color 0.3s ease;
}

/* Input, Select, Textarea Base Styling */
input, select, textarea {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e1e5e9;
    border-radius: 10px;
    font-size: 16px;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.9);
    outline: none;
}

/* Focus State */
input:focus, select:focus, textarea:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    background: rgba(255, 255, 255, 1);
}

/* Textarea Specific Styling */
textarea {
    resize: vertical;
    min-height: 100px;
    font-family: inherit;
}

/* Error State for Inputs (Applied via JS class 'error') */
.error { /* Renamed from .error to match what React sets dynamically */
    border-color: #e74c3c !important;
    box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.1) !important;
}

/* Individual Error Message Display */
.error-message {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 5px;
    /* React handles the display/hide. We remove 'display: none;' */
    animation: shake 0.5s ease-in-out;
}

/* Shake Animation */
@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
}

/* Global Success Message (used for form-success) */
/* The previous .success-message was for individual fields, but we only have a global success message now */
/* No change needed for .form-success */
.form-success {
    background: #d4edda;
    color: #155724;
    padding: 20px;
    border-radius: 10px;
    margin-top: 20px;
    border: 1px solid #c3e6cb;
    /* React handles display: none; */
    animation: slideIn 0.5s ease-out;
}

/* Global Error Message (New styling for #globalErrorMessage) */
#globalErrorMessage {
    color: #e74c3c;
    font-size: 14px;
    text-align: center;
    margin-top: 20px; /* Adjust as needed for spacing from elements above */
    margin-bottom: 20px; /* Adjust as needed for spacing from elements below */
    /* React handles display: none; */
    font-weight: 600; /* Make it stand out a bit more */
}

/* Slide-in Animation for success message */
@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Submit Button Styling */
.submit-btn {
    width: 100%;
    padding: 14px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.submit-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
}

.submit-btn:active {
    transform: translateY(0);
}

.submit-btn:disabled {
    background: #bdc3c7;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Required field indicator */
.required {
    color: #e74c3c;
}


/* Loading Spinner for button */
.loading {
    position: relative;
}

.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid transparent;
    border-top: 2px solid #fff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Input icons (if you plan to add them) */
/* These classes (valid, invalid, input-icon) were in your original CSS but not explicitly used in the React JSX.
   If you add them to your JSX, these styles will apply.
   For now, I'm keeping them but note they aren't directly applied by the provided React code for validation states.
   The 'error' class is what's being applied by the React code to inputs.
*/
.input-icon {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #bdc3c7;
    transition: color 0.3s ease;
}

/* You were using 'valid' and 'error' classes directly on the inputs in React, which is correct */
/* .valid .input-icon { */
/* color: #27ae60; */
/* } */

/* .invalid .input-icon { */
/* color: #e74c3c; */
/* } */

/* Media Queries for Responsiveness */
@media (max-width: 600px) {
    .form-container {
        padding: 30px 20px;
        margin: 10px;
    }

    .form-title {
        font-size: 24px;
    }
}